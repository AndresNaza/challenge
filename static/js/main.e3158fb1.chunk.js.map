{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","pooladdress","poolamountstacked","poolamountreward","investoraccount","investoramountstacked","investoramountreward","depositvalue","rewardvalue","teamhelper","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","LiquidityPoolContract","networks","instance","Contract","abi","address","setState","updateContractTotals","alert","error","methods","getTotalStake","call","totalstake","getTotalRewards","totalrewards","getParticipantStake","String","investorstake","getParticipantEstimatedReward","investorreward","listentoPoolEvents","events","PoolEvent","on","handleDepositValue","e","target","value","handleRewardValue","handleTeamAddressValue","handleDeposit","depositStake","send","from","responseParticipant","responseTotal","handleWithdraw","withdrawStakeAndReward","responseRewards","handleReward","distributeReward","response","handleTeamHelpers","addTeamHelper","this","className","id","type","placeholder","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3158fb1.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport LiquidityPoolContract from \"./contracts/LiquidityPool.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null, \n            pooladdress: null, poolamountstacked: null, poolamountreward: null, \n            investoraccount: null, investoramountstacked: null, investoramountreward: null,\n            depositvalue: null, rewardvalue: null , \n            teamhelper: null};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = LiquidityPoolContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        LiquidityPoolContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, \n                      pooladdress: deployedNetwork.address, \n                      depositvalue:0, rewardvalue: 0}, this.updateContractTotals);\n\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n  \n  updateContractTotals = async () => {   \n    const { accounts, contract } = this.state;\n    const totalstake = await contract.methods.getTotalStake().call();\n    const totalrewards = await contract.methods.getTotalRewards().call();\n    const investorstake = await contract.methods.getParticipantStake(String(accounts)).call();\n    const investorreward = await contract.methods.getParticipantEstimatedReward(String(accounts)).call();\n    this.setState({poolamountstacked: totalstake, poolamountreward: totalrewards,\n                  investoramountstacked:investorstake, investoramountreward: investorreward});\n  };\n\n\n  listentoPoolEvents =  async() => {\n    const { contract } = this.state;\n    await contract.events.PoolEvent().on(\"data\", this.updateContractTotals);\n  };\n\n  handleDepositValue = (e) => {\n    this.setState({depositvalue: e.target.value});\n  }\n\n  handleRewardValue = (e) => {\n    this.setState({rewardvalue: e.target.value});\n  }\n\n  handleTeamAddressValue = (e) => {\n    this.setState({teamhelper: e.target.value});\n  }\n\n  handleDeposit = async () => {\n    const { accounts, contract , depositvalue} = this.state;\n    await contract.methods.depositStake().send({from: accounts[0], value: depositvalue});\n    const responseParticipant = await contract.methods.getParticipantStake(accounts[0]).call();\n    const responseTotal = await contract.methods.getTotalStake().call();\n    this.setState({investoramountstacked: responseParticipant, poolamountstacked:responseTotal})\n  }\n\n  handleWithdraw = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.withdrawStakeAndReward().send({from: accounts[0]});\n    const responseParticipant = await contract.methods.getParticipantStake(accounts[0]).call();\n    const responseTotal = await contract.methods.getTotalStake().call();\n    const responseRewards = await contract.methods.getTotalRewards().call();\n    const investorreward = await contract.methods.getParticipantEstimatedReward(String(accounts)).call();\n    this.setState({investoramountstacked: responseParticipant, investoramountreward: investorreward,\n                  poolamountstacked:responseTotal, poolamountreward: responseRewards})\n  }\n\n  handleReward = async () => {\n    const { accounts, contract , rewardvalue} = this.state;\n    await contract.methods.distributeReward().send({from: accounts[0], value: rewardvalue});\n    const response = await contract.methods.getTotalRewards().call();\n    const investorreward = await contract.methods.getParticipantEstimatedReward(String(accounts)).call();\n    this.setState({poolamountreward: response, investoramountreward: investorreward})\n  }\n  \n  handleTeamHelpers = async () => {\n    const { accounts, contract, teamhelper } = this.state;\n    await contract.methods.addTeamHelper(teamhelper).send({from: accounts[0]});\n  }\n  \n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div id=\"titles\">\n        <h1>Smart Contract Challenge - Exactly Finance</h1>\n        <h2>Interact with ETH Pool Contract</h2>\n        </div>\n\n        <hr></hr>\n        \n        <h3>ETH Pool status</h3>\n        <h4>Address of the contract: {this.state.pooladdress}</h4>\n        <h4>Total ETH (in wei) stacked in the pool: {this.state.poolamountstacked} </h4>\n        <h4>Total rewards (in wei) in the pool: {this.state.poolamountreward} </h4>\n\n        <hr></hr>\n\n        <h3>Investor</h3>\n        <h4>Connected with account: {this.state.accounts}</h4>\n        <h4>Total ETH (in wei) that the account holds in the pool: {this.state.investoramountstacked} </h4>\n        <h4>Total rewards (in wei) that the account is able to claim: {this.state.investoramountreward}</h4>\n        <p>\n          Choose the amount of ether to send to the contract. \n          <br></br><br></br>\n          After the ETHPool team deposits the rewards each week, you'll be able to withdraw your deposit PLUS your rewards. \n          If you need to take your deposits before the rewards are deposited, you'll be able to do so, but with no reward associated.\n        </p>\n\n        <h4>Deposit ETH: Type the amount of ETH (in wei) to deposit</h4>\n        <span>     \n          <input type=\"number\" placeholder=\"Enter amount of wei you want to deposit\" onChange={this.handleDepositValue} ></input>\n          <button onClick={this.handleDeposit}>Deposit</button>\n        </span>\n        <h4>Withdraw ETH: Click to claim your deposit funds and rewards: </h4>\n        <span>\n          <button onClick={this.handleWithdraw}>Withdraw</button>\n        </span>\n\n        <hr></hr>\n\n        <h3>ETH Pool Team</h3>\n        <h4>Deposit the rewards for this week (only from accounts enabled by the owner):</h4>\n        <span>\n          <input type=\"number\" placeholder=\"Enter reward amount (in wei)\" onChange={this.handleRewardValue} ></input>\n          <button onClick={this.handleReward}>Deposit rewards</button>\n        </span>\n        <h4>Whitelist new account for ETH Pool Team (only owner):</h4>\n        <span>\n          <input type=\"text\" placeholder=\"Team helper address\" onChange={this.handleTeamAddressValue} ></input>\n          <button onClick={this.handleTeamHelpers}>Whitelist new address</button>\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}